package com.stone.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.stone.bean.PageQueryBean;
import com.stone.domain.CmPorcelain;
import com.stone.mapper.CmPorcelainMapper;
import com.stone.service.CmPorcelainService;
import com.sun.org.apache.bcel.internal.generic.IF_ACMPEQ;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.Date;

@Service
public class CmPorcelainServiceImpl extends ServiceImpl<CmPorcelainMapper,CmPorcelain> implements CmPorcelainService {
    @Autowired
    private CmPorcelainMapper cmPorcelainMapper;

    //添加瓷器信息
    @Override
    public int addPorcelain(CmPorcelain cmPorcelain) {
        SimpleDateFormat sd = new SimpleDateFormat("yyyyMMddHHmmSS");
        Date date = new Date();
        cmPorcelain.setPorcelainCode("p"+sd.format(date));
        cmPorcelain.setSubmitTime(date);
        return cmPorcelainMapper.insert(cmPorcelain);
    }

    //分页查询所有瓷器信息
    @Override
    public Page<CmPorcelain> findByPage(PageQueryBean<CmPorcelain> pageQueryBean) {
        int pageNum = pageQueryBean.getPageNum() == null ? 0 : pageQueryBean.getPageNum();
        int pageSize = pageQueryBean.getPageSize() == null ? 10 : pageQueryBean.getPageSize();
        Page<CmPorcelain> page = new Page<>(pageNum,pageSize);
        QueryWrapper<CmPorcelain> wrapper = new QueryWrapper<>();
        CmPorcelain cmPorcelain = pageQueryBean.getQueryCondition();
        if (cmPorcelain != null){
            if (StringUtils.isNotEmpty(cmPorcelain.getPorcelainName())){
                wrapper = wrapper.eq("porcelain_name",cmPorcelain.getPorcelainName());
            }
            if (StringUtils.isNotEmpty(cmPorcelain.getPorcelainCode())){
                wrapper = wrapper.eq("porcelain_code",cmPorcelain.getPorcelainCode());
            }
            if (StringUtils.isNotEmpty(cmPorcelain.getPorcelainType())){
                wrapper = wrapper.eq("porcelain_type",cmPorcelain.getPorcelainType());
            }
            if (cmPorcelain.getStatus() != null){
                wrapper = wrapper.eq("status",cmPorcelain.getStatus());
            }
        }

        if (StringUtils.isNotEmpty(pageQueryBean.getOrderByColumn())){
            if (StringUtils.isNotEmpty(pageQueryBean.getIsAsc()) && "desc".equals(pageQueryBean.getIsAsc().toLowerCase())){
                wrapper = wrapper.orderByDesc(pageQueryBean.getOrderByColumn());
            }else {
                wrapper = wrapper.orderByAsc(pageQueryBean.getOrderByColumn());
            }
        }
        return cmPorcelainMapper.selectPage(page,wrapper);
    }

    //检验瓷器是否已存在
    @Override
    public CmPorcelain checkByName(String porcelainName) {
        QueryWrapper<CmPorcelain> wrapper = new QueryWrapper<>();
        wrapper.eq("porcelain_name",porcelainName);
        return cmPorcelainMapper.selectOne(wrapper);
    }

    //修改瓷器信息
    @Override
    public int updateCmPorcelain(CmPorcelain cmPorcelain) {
        UpdateWrapper<CmPorcelain> wrapper = new UpdateWrapper<>();
        wrapper.eq("porcelain_code",cmPorcelain.getPorcelainCode());
        return cmPorcelainMapper.update(cmPorcelain,wrapper);
    }

    //删除瓷器信息
    @Override
    public boolean deleteCmPorcelain(String porcelainCode) {
        QueryWrapper<CmPorcelain> wrapper = new QueryWrapper<>();
        wrapper.eq("porcelain_code",porcelainCode);
        return this.remove(wrapper);
    }
}
