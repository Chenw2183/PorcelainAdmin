package com.stone.service.impl;


import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.stone.bean.PageQueryBean;
import com.stone.domain.*;
import com.stone.mapper.CmRoleMapper;
import com.stone.mapper.CmUserMapper;
import com.stone.service.CmUserService;
import com.stone.utils.MD5;
import com.sun.org.apache.regexp.internal.RE;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.FileInputStream;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

@Service
public class CmUserServiceImpl extends ServiceImpl<CmUserMapper, CmUser> implements CmUserService {
    @Autowired
    private CmUserMapper cmUserMapper;

    @Autowired
    private CmRoleMapper cmRoleMapper;

    @Override
    public CmUser addUser(CmUser cmUser) throws Exception {
        synchronized (this) {
            Date date = new Date();
            SimpleDateFormat sd = new SimpleDateFormat("yyyyMMddHHmmSS");
            String userCode = "u"+sd.format(date);
            cmUser.setUserCode(userCode);
            cmUser.setRoleCode(userCode);
            cmUser.setCreateTime(date);
            Properties properties = new Properties();
            properties.load(CmUserServiceImpl.class.getClassLoader().getResourceAsStream("user.properties"));
            String s = MD5.EncoderByMd5(properties.getProperty("password"));
            cmUser.setPassword(s);
            cmUserMapper.insert(cmUser);
        }
        return cmUser;
    }

    //通过企业编号查找
    @Override
    public CmUser findByUserCode(String userCode) {
        QueryWrapper<CmUser> wrapper = new QueryWrapper<>();
        wrapper.eq("user_code", userCode);
        return cmUserMapper.selectOne(wrapper);

    }

    //添加时判断用户是否存在,检验用户名唯一性
    @Override
    public CmUser checkUser(String username) {
        QueryWrapper<CmUser> wrapper = new QueryWrapper<>();
        wrapper.eq("user_name", username);
        return cmUserMapper.selectOne(wrapper);
    }

    //添加时检验账号（企业编号）是否唯一
    @Override
    public CmUser checkUserCode(String userCode) {
        QueryWrapper<CmUser> wrapper = new QueryWrapper<>();
        wrapper.eq("user_code", userCode);
        return cmUserMapper.selectOne(wrapper);
    }

    @Override
    public List<CmUser> findAll() {
        List<CmUser> cmUser = cmUserMapper.selectList(null);
        return cmUser;
    }

    @Override
    public Page<CmUser> findByPage(PageQueryBean<CmUser> pageQueryBean) {

        int pageNum = pageQueryBean.getPageNum() == null ? 0 : pageQueryBean.getPageNum();
        int pageSize = pageQueryBean.getPageSize() == null ? 10 : pageQueryBean.getPageSize();
        Page<CmUser> page = new Page<>(pageNum, pageSize);
        QueryWrapper<CmUser> wrapper = new QueryWrapper<>();
        CmUser condition = pageQueryBean.getQueryCondition();
        if (condition != null) {
            if (StringUtils.isNotEmpty(condition.getUserCode())) {
                wrapper = wrapper.like("user_code", condition.getUserCode());
            }
            if (StringUtils.isNotEmpty(condition.getUserName())) {
                wrapper = wrapper.like("user_name", condition.getUserName());
            }
            if (condition.getLoginLock() != null) {
                wrapper = wrapper.eq("login_lock", condition.getLoginLock());
            }
        }
        // 拼接排序条件
        if (StringUtils.isNotEmpty(pageQueryBean.getOrderByColumn())) {
            if (StringUtils.isNotEmpty(pageQueryBean.getIsAsc()) && "desc".equals(pageQueryBean.getIsAsc().toLowerCase())) {
                wrapper = wrapper.orderByDesc(pageQueryBean.getOrderByColumn());
            } else {
                wrapper = wrapper.orderByAsc(pageQueryBean.getOrderByColumn());
            }
        }

        return this.cmUserMapper.selectPage(page, wrapper);
    }

    @Override
    public int updateUser(CmUser cmUser) throws Exception {
        UpdateWrapper<CmUser> wrapper = new UpdateWrapper<>();
        if (StringUtils.isNotEmpty(cmUser.getPassword())) {
            String s = MD5.EncoderByMd5(cmUser.getPassword());
            cmUser.setPassword(s);
            wrapper.eq("user_code", cmUser.getUserCode());
            return cmUserMapper.update(cmUser, wrapper);
        } else {
            wrapper.eq("user_code", cmUser.getUserCode());
            return cmUserMapper.update(cmUser, wrapper);
        }
    }

    @Override
    public boolean updateUserStatus(CmUser cmUser) {
        UpdateWrapper<CmUser> wrapper = new UpdateWrapper<>();
        wrapper
                .eq("user_code", cmUser.getUserCode())
                .set("login_lock", cmUser.getLoginLock());
        return this.update(null, wrapper);
    }


    @Override
    public List<CmRoleMenu> findByPage(PageQueryBean<CmUser> pageQueryBean, CmUserLogIn cmUserLogIn) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MD5 md5 = new MD5();
        // 分页
        int pageNum = pageQueryBean.getPageNum() == null ? 0 : pageQueryBean.getPageNum();
        int pageSize = pageQueryBean.getPageSize() == null ? 10 : pageQueryBean.getPageSize();
        Page<CmUser> page = new Page<>(pageNum, pageSize);
        // 获取查询条件
        QueryWrapper<CmUser> wrapper = new QueryWrapper<>();
        CmUser condition = pageQueryBean.getQueryCondition();
        if (condition != null) {
            if (StringUtils.isNotEmpty(condition.getUserCode())) {
                wrapper = wrapper.eq("user_code", condition.getUserCode());
            }
            if (StringUtils.isNotEmpty(condition.getPassword())) {
                wrapper = wrapper.eq("password", md5.EncoderByMd5(condition.getPassword()));
            }

        }
        // 拼接排序条件
        if (StringUtils.isNotEmpty(pageQueryBean.getOrderByColumn())) {
            if (StringUtils.isNotEmpty(pageQueryBean.getIsAsc()) && "desc".equals(pageQueryBean.getIsAsc().toLowerCase())) {
                wrapper = wrapper.orderByDesc(pageQueryBean.getOrderByColumn());
            } else {
                wrapper = wrapper.orderByAsc(pageQueryBean.getOrderByColumn());
            }
        }

        System.out.println("getTotal"+cmUserMapper.selectPage(page, wrapper));
        if (cmUserMapper.selectPage(page, wrapper).getTotal() == 0) {
            System.out.println("User表中有没有账号 或者密码错误");
            return null;
        }
        if (cmUserMapper.selectPage(page, wrapper).getRecords().get(0).getLoginLock() == 1) {
            System.out.println("user 为锁定 直接返回"+cmUserMapper.selectPage(page, wrapper).getRecords().get(0).getLoginLock());
            return null;
        }

        //如果role表中的为冻结直接返回
        PageQueryBean<CmRole> pageQueryBeans = new PageQueryBean<>();
        CmRole cmRole = new CmRole();
        cmRole.setRoleCode(cmUserLogIn.getUserCode());
        pageQueryBeans.setQueryCondition(cmRole);
        Page<CmRole> page1 = listPage1(pageQueryBeans);
        if (page1.getTotal() == 0) {
            System.out.println("权限没有添加");
            return null;
        }

        if (page1.getRecords().get(0).getStatus() == 1) {
            System.out.println("Role表 为冻结");
            return null;
        }

//        System.out.println("账号密码正确 login锁为0 role为不冻结");
//      拿到rolecode查询权限
        List<CmRoleMenu> list = cmUserMapper.selectRoleMenu(cmRole.getRoleCode());
        return list;

    }

    @Override
    public Page<CmRole> listPage1(PageQueryBean<CmRole> pageQueryBean) {
        // 分页
        int pageNum = pageQueryBean.getPageNum() == null ? 0 : pageQueryBean.getPageNum();
        int pageSize = pageQueryBean.getPageSize() == null ? 10 : pageQueryBean.getPageSize();
        Page<CmRole> page = new Page<>(pageNum, pageSize);
        // 获取查询条件
        QueryWrapper<CmRole> wrapper = new QueryWrapper<>();
        CmRole condition = pageQueryBean.getQueryCondition();
        if (condition != null) {
            if (StringUtils.isNotEmpty(condition.getRoleCode())) {
                wrapper = wrapper.eq("role_code", condition.getRoleCode());
            }
        }
        // 拼接排序条件
        if (StringUtils.isNotEmpty(pageQueryBean.getOrderByColumn())) {
            if (StringUtils.isNotEmpty(pageQueryBean.getIsAsc()) && "desc".equals(pageQueryBean.getIsAsc().toLowerCase())) {
                wrapper = wrapper.orderByDesc(pageQueryBean.getOrderByColumn());
            } else {
                wrapper = wrapper.orderByAsc(pageQueryBean.getOrderByColumn());
            }
        }
        return cmRoleMapper.selectPage(page, wrapper);
    }

    @Override
    public List<CmMenu> logIn(CmUserLogIn cmUserLogIn) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        PageQueryBean<CmUser> pageQueryBean = new PageQueryBean<>();
        CmUser cmUser = new CmUser();
        cmUser.setUserCode(cmUserLogIn.getUserCode());
        cmUser.setPassword(cmUserLogIn.getPassword());
        pageQueryBean.setQueryCondition(cmUser);
        List<CmMenu> list =new ArrayList<>();
        if(findByPage(pageQueryBean, cmUserLogIn)!=null){
            for (int i = 0; i <findByPage(pageQueryBean, cmUserLogIn).size() ; i++) {
                list.add((cmRoleMapper.selectById(findByPage(pageQueryBean, cmUserLogIn).get(i).getMenuId())));
            }
        }
        return list;
    }

}
